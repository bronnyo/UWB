#BlueJ class context
comment0.target=Pizza
comment0.text=\r\n\ Pizza\ holds\ a\ list\ of\ toppings\ which\ in\ turn\ determine\r\n\ the\ total\ cost\ and\ calorie\ count\ of\ each\ individual\ pizza\r\n\ which\ is\ then\ stored\ in\ the\ instance\ variables\r\n\ \r\n\ all\ pizzas\ are\ 16"\ diameter\ circles.\r\n\r\n\ @author\ (Krystle\ S\ Levin)\r\n\ @version\ (03/09/2018)\ \r\n
comment1.params=
comment1.target=Pizza()
comment10.params=other
comment10.target=int\ compareTo(java.lang.Object)
comment10.text=\r\n\ CompareTo\r\n\ PreCondition\:\ other\ is\ an\ instance\ of\ Pizza\ and\ is\ not\ null\r\n\ Postcondition\:\ will\ return\ -1\ if\ other\ cost\ is\ less\ than\ this\ cost\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ will\ return\ 1\ if\ other\ cost\ is\ greater\ than\ this\ cost\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ will\ return\ 0\ if\ other\ cost\ equals\ this\ cost\r\n
comment11.params=other
comment11.target=int\ compareToBySize(java.lang.Object)
comment11.text=\r\n\ CompareToBySize\r\n\ PreCondition\:\ other\ is\ an\ instance\ of\ Pizza\ and\ is\ not\ null\r\n\ Postcondition\:\ will\ return\ -1\ if\ other\ size\ is\ less\ than\ this\ size\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ will\ return\ 1\ if\ other\ size\ is\ greater\ than\ this\ size\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ will\ return\ 0\ if\ other\ size\ equals\ this\ size\r\n
comment12.params=other
comment12.target=int\ compareToByCalories(java.lang.Object)
comment12.text=\r\n\ CompareToByCalories\r\n\ PreCondition\:\ other\ is\ an\ instance\ of\ Pizza\ and\ is\ not\ null\r\n\ Postcondition\:\ will\ return\ -1\ if\ other\ total\ calories\ is\ less\ than\ this\ total\ calories\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ will\ return\ 1\ if\ other\ total\ calories\ is\ greater\ than\ this\ total\ calories\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ will\ return\ 0\ if\ other\ total\ calories\ equals\ this\ total\ calories\r\n
comment2.params=f
comment2.target=void\ setRemaining(Fraction)
comment2.text=\r\n\ Pre-conditions\:\ int\ d\ is\ >0\r\n\ post-condition\:\ a\ new\ fraction\ will\ be\ allocated\ to\ represent\ the\ amount\ of\ pizza\ left\r\n
comment3.params=
comment3.target=int\ getCalories()
comment3.text=\r\n\ The\ following\ methods\ are\ "getter"\ methods\ and\ have\ not\ preconditions\r\n\ the\ methods\ will\ return\ a\ value\ according\ to\ its\ specified\ type\r\n
comment4.params=
comment4.target=Money\ getCost()
comment5.params=
comment5.target=double\ getRemainingArea()
comment6.params=
comment6.target=Shape\ getShape()
comment7.params=other
comment7.target=void\ addIngredient(java.lang.Object)
comment7.text=\r\n\ Pre-Condition\:\ the\ other\ object\ is\ a\ non-null\ ingredient\ object\r\n\ Postcondition\:\ the\ ingrdient\ will\ be\ added\ to\ the\ list\ of\ ingrdients\ for\ this\ pizza\r\n
comment8.params=amt
comment8.target=void\ eatSomePizza(Fraction)
comment8.text=\r\n\ eatSomePizza\r\n\ pre-condition\:\ Fraction\ amt\ is\ a\ non\ null\ fraction\ and\ f\ is\ not\ greater\ than\ the\ amount\ left\r\n\ postcondition\:\ The\ size\ of\ the\ pizza\ will\ be\ updated\ according\ to\ the\ amount\ deducted\r\n
comment9.params=
comment9.target=java.lang.String\ toString()
comment9.text=\r\n\ toString\r\n\ returns\ a\ string\ value\ with\ the\ price,\ total\ calories,\ remaining\ fractional\ amount\r\n\ and\ total\ remaining\ area.\r\n
numComments=13
